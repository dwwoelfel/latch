# Hand-maintained schema used by src/schema.ts

scalar JSON

scalar VariationByEnvironment

schema {
  query: Query
  mutation: Mutation
}

type Query {
  testVariationByEnvironment(
    input: VariationByEnvironment
  ): VariationByEnvironment
  node(id: ID!): Node
  viewer: Viewer!
}

type Viewer implements Node {
  id: ID!
  featureFlag(key: String!): FeatureFlag
  featureFlags(first: Int = 10, after: String): FeatureFlagsConnection!
  topicSubscriptions: [TopicSubscription!]!
  environments: [Environment!]!
}

type Mutation {
  createEnvironment(input: CreateEnvironmentInput!): CreateEnvironmentPayload!
  updateEnvironment(input: UpdateEnvironmentInput!): UpdateEnvironmentPayload!
  createFeatureFlag(input: CreateFeatureFlagInput!): CreateFeatureFlagPayload!
  updateFeatureFlag(input: UpdateFeatureFlagInput!): UpdateFeatureFlagPayload!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

interface Node {
  id: ID!
}

enum FeatureFlagType {
  BOOL
  INT
  FLOAT
  STRING
  JSON
}

type FeatureFlag implements Node {
  id: ID!
  key: String!
  generation: String!
  description: String
  variations: [FeatureFlagVariation!]!
  defaultVariation: Int!
  environmentVariations: VariationByEnvironment!
  type: FeatureFlagType!
  previousVersions(
    first: Int = 10
    after: String
  ): FeatureFlagVersionsConnection!
}

type TopicSubscription {
  name: String!
  hostname: String
  consoleUrl: String!
}

type Environment {
  name: String!
  color: String!
}

type FeatureFlagVariation {
  description: String
  value: JSON!
}

type FeatureFlagVersion {
  generation: String!
  description: String
  variations: [FeatureFlagVariation!]!
  defaultVariation: Int!
  environmentVariations: VariationByEnvironment!
  timeDeleted: String!
}

type FeatureFlagsEdge {
  cursor: String!
  node: FeatureFlag!
}

type FeatureFlagsConnection {
  nodes: [FeatureFlag!]!
  edges: [FeatureFlagsEdge!]!
  pageInfo: PageInfo!
}

type FeatureFlagVersionsEdge {
  cursor: String!
  node: FeatureFlagVersion!
}

type FeatureFlagVersionsConnection {
  nodes: [FeatureFlagVersion!]!
  edges: [FeatureFlagVersionsEdge!]!
  pageInfo: PageInfo!
}

input FeatureFlagVariationInput {
  description: String
  value: JSON!
}

input CreateFeatureFlagInput {
  key: String!
  type: FeatureFlagType!
  description: String
  variations: [FeatureFlagVariationInput!]!
  defaultVariation: Int!
  environmentVariations: VariationByEnvironment!
}

type CreateFeatureFlagPayload {
  featureFlag: FeatureFlag!
}

input FeatureFlagPatch {
  description: String
  variations: [FeatureFlagVariationInput!]
  defaultVariation: Int
  environmentVariations: VariationByEnvironment
}

input UpdateFeatureFlagInput {
  key: String!
  generation: String!
  patch: FeatureFlagPatch!
}

type UpdateFeatureFlagPayload {
  featureFlag: FeatureFlag!
}

input CreateEnvironmentInput {
  name: String!
  color: String!
}

type CreateEnvironmentPayload {
  environment: Environment!
  viewer: Viewer!
}

input UpdateEnvironmentPatch {
  color: String!
}

input UpdateEnvironmentInput {
  name: String!
  patch: UpdateEnvironmentPatch!
}

type UpdateEnvironmentPayload {
  environment: Environment!
  viewer: Viewer!
}
